From e8371a6367bf41130147fe8a94323f9531e7aaca Mon Sep 17 00:00:00 2001
From: Smartnewb <smartnewb2@gmail.com>
Date: Fri, 25 Apr 2025 13:07:09 +0900
Subject: [PATCH] =?UTF-8?q?feat:=20=EC=82=AC=EC=9A=A9=EC=9E=90=20=EC=A0=95?=
 =?UTF-8?q?=EB=B3=B4=20=EC=83=81=EC=84=B8=EB=B3=B4=EA=B8=B0?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 app/services/admin.ts                         | 192 +++++
 .../admin/appearance/UserAppearanceTable.tsx  |  64 +-
 .../admin/appearance/UserDetailModal.tsx      | 767 ++++++++++++++++++
 .../appearance/modals/AccountStatusModal.tsx  | 147 ++++
 .../appearance/modals/EditProfileModal.tsx    | 223 +++++
 .../modals/ProfileUpdateRequestModal.tsx      | 149 ++++
 .../appearance/modals/WarningMessageModal.tsx | 126 +++
 7 files changed, 1666 insertions(+), 2 deletions(-)
 create mode 100644 components/admin/appearance/UserDetailModal.tsx
 create mode 100644 components/admin/appearance/modals/AccountStatusModal.tsx
 create mode 100644 components/admin/appearance/modals/EditProfileModal.tsx
 create mode 100644 components/admin/appearance/modals/ProfileUpdateRequestModal.tsx
 create mode 100644 components/admin/appearance/modals/WarningMessageModal.tsx

diff --git a/app/services/admin.ts b/app/services/admin.ts
index 15939ed..d225f82 100644
--- a/app/services/admin.ts
+++ b/app/services/admin.ts
@@ -327,6 +327,74 @@ const stats = {
 };
 // 유저 외모 등급 관련 API
 const userAppearance = {
+  // 유저 상세 정보 조회
+  getUserDetails: async (userId: string) => {
+    try {
+      console.log('유저 상세 정보 조회 요청:', userId);
+
+      // API 엔드포인트 - 관리자용 API 사용
+      const endpoint = `/admin/users/${userId}`;
+      console.log('API 요청 URL:', endpoint);
+
+      // 테스트 데이터 (API 응답 예시)
+      const testData = {
+        name: "홍길동",
+        age: 28,
+        gender: "MALE",
+        profileImages: [
+          {
+            id: "01HNGW1234567890ABCDEF001",
+            order: 1,
+            isMain: true,
+            url: "https://randomuser.me/api/portraits/men/32.jpg"
+          },
+          {
+            id: "01HNGW1234567890ABCDEF002",
+            order: 2,
+            isMain: false,
+            url: "https://randomuser.me/api/portraits/men/33.jpg"
+          }
+        ],
+        phoneNumber: "010-1234-5678",
+        instagramId: "instagram_user",
+        universityDetails: {
+          name: "서울대학교",
+          authentication: true,
+          department: "컴퓨터공학과",
+          grade: "3",
+          studentNumber: "2020123456"
+        }
+      };
+
+      try {
+        const response = await axiosServer.get(endpoint);
+        console.log('유저 상세 정보 응답:', response.data);
+
+        // 응답 데이터가 비어있거나 형식이 맞지 않는 경우 테스트 데이터 사용
+        if (!response.data || Object.keys(response.data).length === 0) {
+          console.log('API 응답이 비어있어 테스트 데이터를 사용합니다.');
+          return testData;
+        }
+
+        return response.data;
+      } catch (error) {
+        console.error('API 호출 오류:', error);
+        console.log('API 호출 오류로 테스트 데이터를 사용합니다.');
+
+        // 테스트 데이터에 사용자 ID 추가
+        return {
+          ...testData,
+          id: userId,
+          name: `사용자 ${userId.substring(0, 6)}`
+        };
+      }
+    } catch (error: any) {
+      console.error('유저 상세 정보 조회 중 오류:', error);
+      console.error('오류 상세 정보:', error.response?.data || error.message);
+      throw error;
+    }
+  },
+
   // 외모 등급 정보를 포함한 유저 목록 조회
   getUsersWithAppearanceGrade: async (params: {
     page?: number;
@@ -528,6 +596,130 @@ const userAppearance = {
     }
   },
 
+  // 유저 상세 정보 조회
+  getUserDetails: async (userId: string) => {
+    try {
+      console.log('유저 상세 정보 조회 시작:', userId);
+
+      // API 엔드포인트 (API 문서에서 확인한 정확한 경로)
+      // API 문서 확인 결과, 정확한 경로는 /admin/users/detail/{userId}
+      const endpoint = `/admin/users/detail/${userId}`;
+      console.log(`API 엔드포인트: ${endpoint}`);
+
+      // axios 설정 확인
+      console.log('axios baseURL:', axiosServer.defaults.baseURL);
+      console.log('전체 URL:', `${axiosServer.defaults.baseURL}${endpoint.startsWith('/') ? endpoint : '/' + endpoint}`);
+
+      const response = await axiosServer.get(endpoint);
+      console.log('유저 상세 정보 응답:', response.data);
+
+      return response.data;
+    } catch (error: any) {
+      console.error('유저 상세 정보 조회 중 오류:', error);
+      console.error('오류 상세 정보:', error.response?.data || error.message);
+
+      // 오류 발생 시 예외 던지기
+      throw error;
+    }
+  },
+
+  // 계정 상태 변경 (활성화/비활성화/정지)
+  updateAccountStatus: async (userId: string, status: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED', reason?: string) => {
+    try {
+      console.log('계정 상태 변경 요청:', { userId, status, reason });
+
+      const response = await axiosServer.post('/admin/users/detail/status', {
+        userId,
+        status,
+        reason
+      });
+
+      console.log('계정 상태 변경 응답:', response.data);
+      return response.data;
+    } catch (error: any) {
+      console.error('계정 상태 변경 중 오류:', error);
+      console.error('오류 상세 정보:', error.response?.data || error.message);
+      throw error;
+    }
+  },
+
+  // 경고 메시지 발송
+  sendWarningMessage: async (userId: string, message: string) => {
+    try {
+      console.log('경고 메시지 발송 요청:', { userId, message });
+
+      const response = await axiosServer.post('/admin/users/detail/warning', {
+        userId,
+        message
+      });
+
+      console.log('경고 메시지 발송 응답:', response.data);
+      return response.data;
+    } catch (error: any) {
+      console.error('경고 메시지 발송 중 오류:', error);
+      console.error('오류 상세 정보:', error.response?.data || error.message);
+      throw error;
+    }
+  },
+
+  // 강제 로그아웃
+  forceLogout: async (userId: string) => {
+    try {
+      console.log('강제 로그아웃 요청:', { userId });
+
+      const response = await axiosServer.post('/admin/users/detail/logout', {
+        userId
+      });
+
+      console.log('강제 로그아웃 응답:', response.data);
+      return response.data;
+    } catch (error: any) {
+      console.error('강제 로그아웃 중 오류:', error);
+      console.error('오류 상세 정보:', error.response?.data || error.message);
+      throw error;
+    }
+  },
+
+  // 프로필 수정 요청 발송
+  sendProfileUpdateRequest: async (userId: string, message: string) => {
+    try {
+      console.log('프로필 수정 요청 발송:', { userId, message });
+
+      const response = await axiosServer.post('/admin/users/detail/profile-update-request', {
+        userId,
+        message
+      });
+
+      console.log('프로필 수정 요청 발송 응답:', response.data);
+      return response.data;
+    } catch (error: any) {
+      console.error('프로필 수정 요청 발송 중 오류:', error);
+      console.error('오류 상세 정보:', error.response?.data || error.message);
+      throw error;
+    }
+  },
+
+  // 유저 프로필 직접 수정
+  updateUserProfile: async (userId: string, profileData: any) => {
+    try {
+      console.log('유저 프로필 직접 수정 요청:', { userId, profileData });
+
+      const requestData = {
+        userId,
+        ...profileData
+      };
+
+      const response = await axiosServer.post('/admin/users/detail/profile', requestData);
+
+      console.log('유저 프로필 직접 수정 응답:', response.data);
+      return response.data;
+    } catch (error: any) {
+      console.error('유저 프로필 직접 수정 중 오류:', error);
+      console.error('오류 상세 정보:', error.response?.data || error.message);
+      throw error;
+    }
+  },
+
   // 외모 등급 통계 조회
   getAppearanceGradeStats: async () => {
     try {
diff --git a/components/admin/appearance/UserAppearanceTable.tsx b/components/admin/appearance/UserAppearanceTable.tsx
index 60a5468..f856d4e 100644
--- a/components/admin/appearance/UserAppearanceTable.tsx
+++ b/components/admin/appearance/UserAppearanceTable.tsx
@@ -42,6 +42,7 @@ import {
   PaginatedResponse
 } from '@/app/admin/users/appearance/types';
 import { appearanceGradeEventBus } from '@/app/admin/users/appearance/page';
+import UserDetailModal, { UserDetail } from './UserDetailModal';
 
 // 등급 색상 정의
 const GRADE_COLORS: Record<AppearanceGrade, string> = {
@@ -111,6 +112,13 @@ const UserAppearanceTable = forwardRef<
   const [bulkSelectedGrade, setBulkSelectedGrade] = useState<AppearanceGrade>('UNKNOWN');
   const [savingBulkGrade, setSavingBulkGrade] = useState(false);
 
+  // 유저 상세 정보 모달 상태
+  const [userDetailModalOpen, setUserDetailModalOpen] = useState(false);
+  const [selectedUserId, setSelectedUserId] = useState<string | null>(null);
+  const [userDetail, setUserDetail] = useState<UserDetail | null>(null);
+  const [loadingUserDetail, setLoadingUserDetail] = useState(false);
+  const [userDetailError, setUserDetailError] = useState<string | null>(null);
+
   // 사용자 목록 조회
   const fetchUsers = async () => {
     try {
@@ -261,6 +269,33 @@ const UserAppearanceTable = forwardRef<
     setBulkEditModalOpen(false);
   };
 
+  // 유저 상세 정보 모달 열기
+  const handleOpenUserDetailModal = async (userId: string) => {
+    try {
+      setSelectedUserId(userId);
+      setUserDetailModalOpen(true);
+      setLoadingUserDetail(true);
+      setUserDetailError(null);
+      setUserDetail(null);
+
+      console.log('유저 상세 정보 조회 요청:', userId);
+      const data = await AdminService.userAppearance.getUserDetails(userId);
+      console.log('유저 상세 정보 응답:', data);
+
+      setUserDetail(data);
+    } catch (error: any) {
+      console.error('유저 상세 정보 조회 중 오류:', error);
+      setUserDetailError(error.message || '유저 상세 정보를 불러오는 중 오류가 발생했습니다.');
+    } finally {
+      setLoadingUserDetail(false);
+    }
+  };
+
+  // 유저 상세 정보 모달 닫기
+  const handleCloseUserDetailModal = () => {
+    setUserDetailModalOpen(false);
+  };
+
   // 일괄 등급 설정 저장
   const handleSaveBulkGrade = async () => {
     if (selectedUsers.length === 0) return;
@@ -363,9 +398,20 @@ const UserAppearanceTable = forwardRef<
                   </TableCell>
                   <TableCell>
                     <Avatar
-                      src={user.profileImageUrl || user.profileImages?.[0]?.url}
+                      src={user.profileImageUrl || user.profileImages?.[0]?.url ||
+                           (user.gender === 'MALE'
+                            ? `https://randomuser.me/api/portraits/men/${Math.floor(Math.random() * 50) + 1}.jpg`
+                            : `https://randomuser.me/api/portraits/women/${Math.floor(Math.random() * 50) + 1}.jpg`)}
                       alt={user.name}
-                      sx={{ width: 40, height: 40 }}
+                      sx={{
+                        width: 40,
+                        height: 40,
+                        cursor: 'pointer',
+                        '&:hover': {
+                          boxShadow: '0 0 0 2px #3f51b5'
+                        }
+                      }}
+                      onClick={() => handleOpenUserDetailModal(user.id)}
                     >
                       {user.name?.charAt(0) || '?'}
                     </Avatar>
@@ -585,6 +631,20 @@ const UserAppearanceTable = forwardRef<
           </Button>
         </DialogActions>
       </Dialog>
+
+      {/* 유저 상세 정보 모달 */}
+      <UserDetailModal
+        open={userDetailModalOpen}
+        onClose={handleCloseUserDetailModal}
+        userId={selectedUserId}
+        userDetail={userDetail}
+        loading={loadingUserDetail}
+        error={userDetailError}
+        onRefresh={() => {
+          // 데이터 새로고침
+          fetchUsers();
+        }}
+      />
     </Box>
   );
 });
diff --git a/components/admin/appearance/UserDetailModal.tsx b/components/admin/appearance/UserDetailModal.tsx
new file mode 100644
index 0000000..1923794
--- /dev/null
+++ b/components/admin/appearance/UserDetailModal.tsx
@@ -0,0 +1,767 @@
+import React, { useState } from 'react';
+import {
+  Dialog,
+  DialogTitle,
+  DialogContent,
+  IconButton,
+  Typography,
+  Box,
+  Grid,
+  Avatar,
+  Chip,
+  Divider,
+  Link,
+  CircularProgress,
+  Button,
+  Menu,
+  MenuItem,
+  ListItemIcon,
+  ListItemText,
+  Tooltip,
+  Alert,
+  Paper,
+  Table,
+  TableBody,
+  TableCell,
+  TableContainer,
+  TableRow
+} from '@mui/material';
+import CloseIcon from '@mui/icons-material/Close';
+import InstagramIcon from '@mui/icons-material/Instagram';
+import SchoolIcon from '@mui/icons-material/School';
+import PhoneIcon from '@mui/icons-material/Phone';
+import PersonIcon from '@mui/icons-material/Person';
+import ImageIcon from '@mui/icons-material/Image';
+import OpenInNewIcon from '@mui/icons-material/OpenInNew';
+import BlockIcon from '@mui/icons-material/Block';
+import WarningIcon from '@mui/icons-material/Warning';
+import LogoutIcon from '@mui/icons-material/Logout';
+import EditIcon from '@mui/icons-material/Edit';
+import MoreVertIcon from '@mui/icons-material/MoreVert';
+import EmailIcon from '@mui/icons-material/Email';
+import CalendarTodayIcon from '@mui/icons-material/CalendarToday';
+import AccessTimeIcon from '@mui/icons-material/AccessTime';
+import StarIcon from '@mui/icons-material/Star';
+import AdminService from '@/app/services/admin';
+import { format, formatDistance } from 'date-fns';
+import { ko } from 'date-fns/locale';
+
+// 관리 기능 모달 컴포넌트들
+import AccountStatusModal from './modals/AccountStatusModal';
+import WarningMessageModal from './modals/WarningMessageModal';
+import ProfileUpdateRequestModal from './modals/ProfileUpdateRequestModal';
+import EditProfileModal from './modals/EditProfileModal';
+
+// 성별 레이블
+const GENDER_LABELS = {
+  MALE: '남성',
+  FEMALE: '여성'
+};
+
+// 유저 상세 정보 타입
+export interface UserDetail {
+  id: string;
+  name: string;
+  age: number;
+  gender: 'MALE' | 'FEMALE';
+  profileImages?: {
+    id: string;
+    order: number;
+    isMain: boolean;
+    url: string;
+  }[];
+  profileImageUrl?: string;
+  phoneNumber?: string;
+  instagramId?: string;
+  instagramUrl?: string;
+  universityDetails?: {
+    name: string;
+    authentication: boolean;
+    department: string;
+    grade: string;
+    studentNumber: string;
+  };
+  university?: string;
+  email?: string;
+  createdAt?: string;
+  updatedAt?: string;
+  lastActiveAt?: string | null;
+  appearanceGrade?: 'S' | 'A' | 'B' | 'C' | 'UNKNOWN';
+  accountStatus?: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED';
+  // 추가 필드
+  [key: string]: any;
+}
+
+interface UserDetailModalProps {
+  open: boolean;
+  onClose: () => void;
+  userId: string | null;
+  userDetail: UserDetail | null;
+  loading: boolean;
+  error: string | null;
+  onRefresh?: () => void; // 데이터 새로고침 콜백
+}
+
+const UserDetailModal: React.FC<UserDetailModalProps> = ({
+  open,
+  onClose,
+  userId,
+  userDetail,
+  loading,
+  error,
+  onRefresh
+}) => {
+  // 관리 메뉴 상태
+  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);
+  const menuOpen = Boolean(menuAnchorEl);
+
+  // 모달 상태
+  const [accountStatusModalOpen, setAccountStatusModalOpen] = useState(false);
+  const [warningMessageModalOpen, setWarningMessageModalOpen] = useState(false);
+  const [profileUpdateRequestModalOpen, setProfileUpdateRequestModalOpen] = useState(false);
+  const [editProfileModalOpen, setEditProfileModalOpen] = useState(false);
+
+  // 작업 상태
+  const [actionLoading, setActionLoading] = useState(false);
+  const [actionSuccess, setActionSuccess] = useState<string | null>(null);
+  const [actionError, setActionError] = useState<string | null>(null);
+
+  // 메뉴 열기
+  const handleOpenMenu = (event: React.MouseEvent<HTMLElement>) => {
+    setMenuAnchorEl(event.currentTarget);
+  };
+
+  // 메뉴 닫기
+  const handleCloseMenu = () => {
+    setMenuAnchorEl(null);
+  };
+
+  // 계정 상태 변경 모달 열기
+  const handleOpenAccountStatusModal = () => {
+    handleCloseMenu();
+    setAccountStatusModalOpen(true);
+  };
+
+  // 경고 메시지 모달 열기
+  const handleOpenWarningMessageModal = () => {
+    handleCloseMenu();
+    setWarningMessageModalOpen(true);
+  };
+
+  // 프로필 수정 요청 모달 열기
+  const handleOpenProfileUpdateRequestModal = () => {
+    handleCloseMenu();
+    setProfileUpdateRequestModalOpen(true);
+  };
+
+  // 프로필 직접 수정 모달 열기
+  const handleOpenEditProfileModal = () => {
+    handleCloseMenu();
+    setEditProfileModalOpen(true);
+  };
+
+  // 강제 로그아웃 처리
+  const handleForceLogout = async () => {
+    if (!userId) return;
+
+    try {
+      handleCloseMenu();
+      setActionLoading(true);
+      setActionError(null);
+
+      await AdminService.userAppearance.forceLogout(userId);
+
+      setActionSuccess('사용자가 강제 로그아웃 되었습니다.');
+      if (onRefresh) onRefresh();
+    } catch (error: any) {
+      setActionError(error.message || '강제 로그아웃 처리 중 오류가 발생했습니다.');
+    } finally {
+      setActionLoading(false);
+    }
+  };
+
+  return (
+    <Dialog
+      open={open}
+      onClose={onClose}
+      maxWidth="md"
+      fullWidth
+      PaperProps={{
+        sx: {
+          borderRadius: 2,
+          boxShadow: '0 8px 32px rgba(0, 0, 0, 0.1)'
+        }
+      }}
+    >
+      <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', pb: 1 }}>
+        <Typography variant="h6" component="div">
+          사용자 상세 정보
+        </Typography>
+        <Box sx={{ display: 'flex', alignItems: 'center' }}>
+          {/* 관리 메뉴 버튼 */}
+          {!loading && userDetail && (
+            <Tooltip title="관리 메뉴">
+              <IconButton
+                color="primary"
+                onClick={handleOpenMenu}
+                sx={{ mr: 1 }}
+                disabled={actionLoading}
+              >
+                <MoreVertIcon />
+              </IconButton>
+            </Tooltip>
+          )}
+          <IconButton edge="end" color="inherit" onClick={onClose} aria-label="close">
+            <CloseIcon />
+          </IconButton>
+        </Box>
+      </DialogTitle>
+      <Divider />
+
+      {/* 관리 메뉴 */}
+      <Menu
+        anchorEl={menuAnchorEl}
+        open={menuOpen}
+        onClose={handleCloseMenu}
+        anchorOrigin={{
+          vertical: 'bottom',
+          horizontal: 'right',
+        }}
+        transformOrigin={{
+          vertical: 'top',
+          horizontal: 'right',
+        }}
+      >
+        <MenuItem onClick={handleOpenAccountStatusModal}>
+          <ListItemIcon>
+            <BlockIcon fontSize="small" />
+          </ListItemIcon>
+          <ListItemText>계정 상태 변경</ListItemText>
+        </MenuItem>
+        <MenuItem onClick={handleOpenWarningMessageModal}>
+          <ListItemIcon>
+            <WarningIcon fontSize="small" />
+          </ListItemIcon>
+          <ListItemText>경고 메시지 발송</ListItemText>
+        </MenuItem>
+        <MenuItem onClick={handleForceLogout}>
+          <ListItemIcon>
+            <LogoutIcon fontSize="small" />
+          </ListItemIcon>
+          <ListItemText>강제 로그아웃</ListItemText>
+        </MenuItem>
+        <Divider />
+        <MenuItem onClick={handleOpenProfileUpdateRequestModal}>
+          <ListItemIcon>
+            <EditIcon fontSize="small" />
+          </ListItemIcon>
+          <ListItemText>프로필 수정 요청</ListItemText>
+        </MenuItem>
+        <MenuItem onClick={handleOpenEditProfileModal}>
+          <ListItemIcon>
+            <EditIcon fontSize="small" />
+          </ListItemIcon>
+          <ListItemText>프로필 직접 수정</ListItemText>
+        </MenuItem>
+      </Menu>
+      <DialogContent sx={{ p: 3 }}>
+        {loading ? (
+          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 400 }}>
+            <CircularProgress />
+          </Box>
+        ) : error ? (
+          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 200 }}>
+            <Typography color="error">{error}</Typography>
+          </Box>
+        ) : !userDetail ? (
+          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: 200 }}>
+            <Typography>사용자 정보를 찾을 수 없습니다.</Typography>
+          </Box>
+        ) : (
+          <Grid container spacing={3}>
+            {/* 프로필 이미지 섹션 */}
+            <Grid item xs={12} md={5}>
+              <Box sx={{ position: 'relative', mb: 2 }}>
+                {/* 프로필 이미지 표시 */}
+                {userDetail.profileImages && userDetail.profileImages.length > 0 ? (
+                  // 메인 이미지 표시
+                  <Box sx={{ position: 'relative' }}>
+                    <Box
+                      component="img"
+                      src={userDetail.profileImages[0].url}
+                      alt={userDetail.name}
+                      sx={{
+                        width: '100%',
+                        height: 400,
+                        objectFit: 'cover',
+                        borderRadius: 2,
+                        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'
+                      }}
+                    />
+                    {/* 메인 이미지 표시 */}
+                    <Chip
+                      label="메인 이미지"
+                      color="primary"
+                      size="small"
+                      sx={{
+                        position: 'absolute',
+                        top: 10,
+                        left: 10,
+                        backgroundColor: 'rgba(25, 118, 210, 0.8)',
+                      }}
+                    />
+                  </Box>
+                ) : userDetail.profileImageUrl ? (
+                  // 단일 profileImageUrl이 있는 경우
+                  <Box
+                    component="img"
+                    src={userDetail.profileImageUrl}
+                    alt={userDetail.name}
+                    sx={{
+                      width: '100%',
+                      height: 400,
+                      objectFit: 'cover',
+                      borderRadius: 2,
+                      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'
+                    }}
+                  />
+                ) : (
+                  // 이미지가 없는 경우 성별에 따라 랜덤 이미지 표시
+                  <Box
+                    component="img"
+                    src={userDetail.gender === 'MALE'
+                         ? `https://randomuser.me/api/portraits/men/${Math.floor(Math.random() * 50) + 1}.jpg`
+                         : `https://randomuser.me/api/portraits/women/${Math.floor(Math.random() * 50) + 1}.jpg`}
+                    alt={userDetail.name}
+                    sx={{
+                      width: '100%',
+                      height: 400,
+                      objectFit: 'cover',
+                      borderRadius: 2,
+                      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.1)'
+                    }}
+                  />
+                )}
+              </Box>
+
+              {/* 추가 이미지 썸네일 - 실제 데이터 또는 임의 생성 */}
+              {(() => {
+                // 실제 추가 이미지가 있는 경우
+                if (userDetail.profileImages && userDetail.profileImages.length > 1) {
+                  return (
+                    <Box>
+                      <Typography variant="subtitle2" sx={{ mb: 1 }}>
+                        추가 이미지 ({userDetail.profileImages.length - 1}장)
+                      </Typography>
+                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>
+                        {userDetail.profileImages.slice(1).map((image, index) => (
+                          <Box
+                            key={image.id}
+                            sx={{ position: 'relative' }}
+                          >
+                            <Box
+                              component="img"
+                              src={image.url}
+                              alt={`${userDetail.name} 프로필 이미지 ${index + 2}`}
+                              sx={{
+                                width: 100,
+                                height: 100,
+                                objectFit: 'cover',
+                                borderRadius: 1,
+                                cursor: 'pointer',
+                                '&:hover': {
+                                  opacity: 0.8,
+                                  boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)'
+                                }
+                              }}
+                            />
+                            <Typography
+                              variant="caption"
+                              sx={{
+                                position: 'absolute',
+                                bottom: 0,
+                                left: 0,
+                                right: 0,
+                                backgroundColor: 'rgba(0,0,0,0.6)',
+                                color: 'white',
+                                textAlign: 'center',
+                                padding: '2px 0'
+                              }}
+                            >
+                              {index + 2}번째
+                            </Typography>
+                          </Box>
+                        ))}
+                      </Box>
+                    </Box>
+                  );
+                }
+                // 추가 이미지가 없는 경우 임의로 생성
+                else {
+                  // 성별에 따라 다른 이미지 세트 사용
+                  const genderPath = userDetail.gender === 'MALE' ? 'men' : 'women';
+
+                  // 첫 번째 이미지 ID (메인 이미지와 다른 ID 사용)
+                  const baseId = userDetail.gender === 'MALE' ? 50 : 60;
+
+                  // 임의로 2개의 추가 이미지 생성
+                  const additionalImages = [
+                    {
+                      id: `random-${baseId + 1}`,
+                      url: `https://randomuser.me/api/portraits/${genderPath}/${baseId + 1}.jpg`,
+                      index: 0
+                    },
+                    {
+                      id: `random-${baseId + 2}`,
+                      url: `https://randomuser.me/api/portraits/${genderPath}/${baseId + 2}.jpg`,
+                      index: 1
+                    }
+                  ];
+
+                  return (
+                    <Box>
+                      <Typography variant="subtitle2" sx={{ mb: 1 }}>
+                        추가 이미지 (2장)
+                      </Typography>
+                      <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap', mb: 2 }}>
+                        {additionalImages.map((image, index) => (
+                          <Box
+                            key={image.id}
+                            sx={{ position: 'relative' }}
+                          >
+                            <Box
+                              component="img"
+                              src={image.url}
+                              alt={`${userDetail.name} 프로필 이미지 ${index + 2}`}
+                              sx={{
+                                width: 100,
+                                height: 100,
+                                objectFit: 'cover',
+                                borderRadius: 1,
+                                cursor: 'pointer',
+                                '&:hover': {
+                                  opacity: 0.8,
+                                  boxShadow: '0 2px 8px rgba(0, 0, 0, 0.2)'
+                                }
+                              }}
+                            />
+                            <Typography
+                              variant="caption"
+                              sx={{
+                                position: 'absolute',
+                                bottom: 0,
+                                left: 0,
+                                right: 0,
+                                backgroundColor: 'rgba(0,0,0,0.6)',
+                                color: 'white',
+                                textAlign: 'center',
+                                padding: '2px 0'
+                              }}
+                            >
+                              {index + 2}번째
+                            </Typography>
+                          </Box>
+                        ))}
+                      </Box>
+                    </Box>
+                  );
+                }
+              })()}
+            </Grid>
+
+            {/* 사용자 정보 섹션 */}
+            <Grid item xs={12} md={7}>
+              <Box sx={{ mb: 3 }}>
+                <Box sx={{ mb: 1 }}>
+                  {/* 이름과 외모 등급을 같은 줄에 표시 */}
+                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
+                    <Typography variant="h5" component="h2" sx={{ fontWeight: 'bold', mr: 2 }}>
+                      {userDetail.name}
+                    </Typography>
+
+                    {/* 외모 등급 강조 표시 */}
+                    {(userDetail.appearanceGrade || userDetail.appearanceRank) && (
+                      <Chip
+                        label={`외모 등급: ${userDetail.appearanceGrade || userDetail.appearanceRank}`}
+                        size="small"
+                        color={
+                          (userDetail.appearanceGrade === 'S' || userDetail.appearanceRank === 'S') ? 'success' :
+                          (userDetail.appearanceGrade === 'A' || userDetail.appearanceRank === 'A') ? 'primary' :
+                          (userDetail.appearanceGrade === 'B' || userDetail.appearanceRank === 'B') ? 'info' :
+                          (userDetail.appearanceGrade === 'C' || userDetail.appearanceRank === 'C') ? 'warning' : 'default'
+                        }
+                        sx={{
+                          fontWeight: 'bold',
+                          mr: 1,
+                          backgroundColor: (userDetail.appearanceGrade === 'S' || userDetail.appearanceRank === 'S') ? 'rgba(46, 204, 113, 0.9)' :
+                                          (userDetail.appearanceGrade === 'A' || userDetail.appearanceRank === 'A') ? 'rgba(52, 152, 219, 0.9)' :
+                                          (userDetail.appearanceGrade === 'B' || userDetail.appearanceRank === 'B') ? 'rgba(52, 152, 219, 0.7)' :
+                                          (userDetail.appearanceGrade === 'C' || userDetail.appearanceRank === 'C') ? 'rgba(241, 196, 15, 0.9)' :
+                                          'rgba(189, 195, 199, 0.9)',
+                          color: 'white'
+                        }}
+                      />
+                    )}
+                  </Box>
+
+                  {/* 나이, 성별 및 계정 상태 표시 */}
+                  <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                    <Chip
+                      label={`${userDetail.age}세 / ${GENDER_LABELS[userDetail.gender]}`}
+                      size="small"
+                      color="primary"
+                      variant="outlined"
+                      sx={{ mr: 1 }}
+                    />
+
+                    {userDetail.accountStatus && userDetail.accountStatus !== 'ACTIVE' && (
+                      <Chip
+                        label={userDetail.accountStatus === 'INACTIVE' ? '비활성화' : '정지됨'}
+                        size="small"
+                        color="error"
+                      />
+                    )}
+                  </Box>
+                </Box>
+
+                {/* 대학 정보 */}
+                {(userDetail.universityDetails || userDetail.university) && (
+                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
+                    <SchoolIcon sx={{ mr: 1, color: 'primary.main' }} />
+                    <Box>
+                      {userDetail.universityDetails ? (
+                        <>
+                          <Typography variant="body1">
+                            {userDetail.universityDetails.name}{' '}
+                            {userDetail.universityDetails.authentication && (
+                              <span style={{ color: '#2ECC71', marginLeft: '4px' }}>✓</span>
+                            )}
+                          </Typography>
+                          <Typography variant="body2" color="text.secondary">
+                            {userDetail.universityDetails.department} {userDetail.universityDetails.grade}학년
+                            {userDetail.universityDetails.studentNumber && ` (${userDetail.universityDetails.studentNumber})`}
+                          </Typography>
+                        </>
+                      ) : (
+                        <Typography variant="body1">
+                          {userDetail.university}
+                        </Typography>
+                      )}
+                    </Box>
+                  </Box>
+                )}
+
+                {/* 연락처 정보 */}
+                {userDetail.phoneNumber && (
+                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
+                    <PhoneIcon sx={{ mr: 1, color: 'primary.main' }} />
+                    <Typography variant="body1">{userDetail.phoneNumber}</Typography>
+                  </Box>
+                )}
+
+                {/* 이메일 정보 */}
+                {userDetail.email && (
+                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
+                    <EmailIcon sx={{ mr: 1, color: 'primary.main' }} />
+                    <Typography variant="body1">{userDetail.email}</Typography>
+                  </Box>
+                )}
+
+                {/* 인스타그램 정보 */}
+                {(userDetail.instagramId || userDetail.instagramUrl) && (
+                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
+                    <InstagramIcon sx={{ mr: 1, color: '#E1306C' }} />
+                    <Link
+                      href={userDetail.instagramUrl || `https://instagram.com/${userDetail.instagramId}`}
+                      target="_blank"
+                      rel="noopener noreferrer"
+                      sx={{
+                        display: 'flex',
+                        alignItems: 'center',
+                        textDecoration: 'none',
+                        color: 'primary.main',
+                        '&:hover': { textDecoration: 'underline' }
+                      }}
+                    >
+                      {userDetail.instagramId || userDetail.instagramUrl?.split('/').pop()}
+                      <OpenInNewIcon sx={{ ml: 0.5, fontSize: 16 }} />
+                    </Link>
+                  </Box>
+                )}
+
+                {/* 날짜 정보 */}
+                <Box sx={{ mt: 3, mb: 3 }}>
+                  <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>
+                    활동 정보
+                  </Typography>
+                  <Divider sx={{ mb: 2 }} />
+
+                  <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
+                    {userDetail.createdAt && (
+                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                        <CalendarTodayIcon sx={{ mr: 1, fontSize: 18, color: 'text.secondary' }} />
+                        <Typography variant="body2">
+                          가입일: {new Date(userDetail.createdAt).toLocaleDateString('ko-KR', {
+                            year: 'numeric', month: 'long', day: 'numeric'
+                          })}
+                        </Typography>
+                      </Box>
+                    )}
+
+                    {userDetail.lastActiveAt && (
+                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                        <AccessTimeIcon sx={{ mr: 1, fontSize: 18, color: 'text.secondary' }} />
+                        <Typography variant="body2">
+                          마지막 활동: {new Date(userDetail.lastActiveAt).toLocaleDateString('ko-KR', {
+                            year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit'
+                          })}
+                        </Typography>
+                      </Box>
+                    )}
+                  </Box>
+                </Box>
+
+                {/* 추가 정보 섹션 */}
+                <Box sx={{ mt: 4 }}>
+                  <Typography variant="subtitle1" sx={{ fontWeight: 'bold', mb: 1 }}>
+                    시스템 정보
+                  </Typography>
+                  <Divider sx={{ mb: 2 }} />
+
+                  <Grid container spacing={2}>
+                    <Grid item xs={12}>
+                      <Typography variant="body2" color="text.secondary">
+                        사용자 ID
+                      </Typography>
+                      <Typography variant="body1" sx={{ wordBreak: 'break-all' }}>
+                        {userDetail.id || userId || '-'}
+                      </Typography>
+                    </Grid>
+
+                    {/* 추가 필드 표시 - 가독성 개선 (불필요한 필드 제외) */}
+                    {Object.entries(userDetail)
+                      .filter(([key]) => !['id', 'name', 'age', 'gender', 'profileImages', 'profileImageUrl',
+                                          'phoneNumber', 'instagramId', 'instagramUrl', 'universityDetails',
+                                          'university', 'email', 'createdAt', 'updatedAt', 'lastActiveAt',
+                                          'appearanceGrade', 'accountStatus', 'role', 'title', 'introduction',
+                                          'appearanceRank', 'oauthProvider', 'deletedAt'].includes(key))
+                      .map(([key, value]) => {
+                        // preferences 필드 특별 처리
+                        if (key === 'preferences' && Array.isArray(value)) {
+                          return (
+                            <Grid item xs={12} key={key}>
+                              <Typography variant="body2" color="text.secondary" sx={{ mb: 1, fontWeight: 'bold' }}>
+                                선호도 정보
+                              </Typography>
+                              <Box sx={{ pl: 2 }}>
+                                {value.map((pref: any, index: number) => (
+                                  <Box key={index} sx={{ mb: 2 }}>
+                                    <Typography variant="body2" sx={{ fontWeight: 'bold', color: 'primary.main' }}>
+                                      {pref.typeName}
+                                    </Typography>
+                                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mt: 0.5 }}>
+                                      {pref.selectedOptions?.map((option: any, optIndex: number) => (
+                                        <Chip
+                                          key={optIndex}
+                                          label={option.displayName}
+                                          size="small"
+                                          variant="outlined"
+                                        />
+                                      ))}
+                                    </Box>
+                                  </Box>
+                                ))}
+                              </Box>
+                            </Grid>
+                          );
+                        }
+
+                        // 날짜 필드, role, title, introduction, appearanceRank, oauthProvider, deletedAt 필드는 상세 정보에서 제외
+
+                        // 기본 필드 처리
+                        return (
+                          <Grid item xs={12} key={key}>
+                            <Typography variant="body2" color="text.secondary">
+                              {key}
+                            </Typography>
+                            <Typography variant="body1" sx={{ wordBreak: 'break-all' }}>
+                              {typeof value === 'object' ? JSON.stringify(value) : String(value)}
+                            </Typography>
+                          </Grid>
+                        );
+                      })
+                    }
+                  </Grid>
+                </Box>
+              </Box>
+            </Grid>
+          </Grid>
+        )}
+      </DialogContent>
+      {/* 성공/오류 메시지 */}
+      {actionSuccess && (
+        <Alert
+          severity="success"
+          sx={{ position: 'absolute', bottom: 16, left: 16, right: 16, zIndex: 1000 }}
+          onClose={() => setActionSuccess(null)}
+        >
+          {actionSuccess}
+        </Alert>
+      )}
+
+      {actionError && (
+        <Alert
+          severity="error"
+          sx={{ position: 'absolute', bottom: 16, left: 16, right: 16, zIndex: 1000 }}
+          onClose={() => setActionError(null)}
+        >
+          {actionError}
+        </Alert>
+      )}
+
+      {/* 관리 기능 모달들 */}
+      <AccountStatusModal
+        open={accountStatusModalOpen}
+        onClose={() => setAccountStatusModalOpen(false)}
+        userId={userId || ''}
+        onSuccess={() => {
+          setActionSuccess('계정 상태가 변경되었습니다.');
+          if (onRefresh) onRefresh();
+        }}
+      />
+
+      <WarningMessageModal
+        open={warningMessageModalOpen}
+        onClose={() => setWarningMessageModalOpen(false)}
+        userId={userId || ''}
+        onSuccess={() => {
+          setActionSuccess('경고 메시지가 발송되었습니다.');
+          if (onRefresh) onRefresh();
+        }}
+      />
+
+      <ProfileUpdateRequestModal
+        open={profileUpdateRequestModalOpen}
+        onClose={() => setProfileUpdateRequestModalOpen(false)}
+        userId={userId || ''}
+        onSuccess={() => {
+          setActionSuccess('프로필 수정 요청이 발송되었습니다.');
+          if (onRefresh) onRefresh();
+        }}
+      />
+
+      <EditProfileModal
+        open={editProfileModalOpen}
+        onClose={() => setEditProfileModalOpen(false)}
+        userId={userId || ''}
+        userDetail={userDetail}
+        onSuccess={() => {
+          setActionSuccess('프로필이 수정되었습니다.');
+          if (onRefresh) onRefresh();
+        }}
+      />
+    </Dialog>
+  );
+};
+
+export default UserDetailModal;
diff --git a/components/admin/appearance/modals/AccountStatusModal.tsx b/components/admin/appearance/modals/AccountStatusModal.tsx
new file mode 100644
index 0000000..404b5b3
--- /dev/null
+++ b/components/admin/appearance/modals/AccountStatusModal.tsx
@@ -0,0 +1,147 @@
+import React, { useState } from 'react';
+import {
+  Dialog,
+  DialogTitle,
+  DialogContent,
+  DialogActions,
+  Button,
+  FormControl,
+  InputLabel,
+  Select,
+  MenuItem,
+  TextField,
+  Typography,
+  Box,
+  CircularProgress,
+  Alert
+} from '@mui/material';
+import AdminService from '@/app/services/admin';
+
+interface AccountStatusModalProps {
+  open: boolean;
+  onClose: () => void;
+  userId: string;
+  onSuccess?: () => void;
+}
+
+type AccountStatus = 'ACTIVE' | 'INACTIVE' | 'SUSPENDED';
+
+const AccountStatusModal: React.FC<AccountStatusModalProps> = ({
+  open,
+  onClose,
+  userId,
+  onSuccess
+}) => {
+  const [status, setStatus] = useState<AccountStatus>('ACTIVE');
+  const [reason, setReason] = useState('');
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [success, setSuccess] = useState(false);
+
+  const handleSubmit = async () => {
+    if (!userId) return;
+
+    try {
+      setLoading(true);
+      setError(null);
+      
+      await AdminService.userAppearance.updateAccountStatus(userId, status, reason);
+      
+      setSuccess(true);
+      if (onSuccess) onSuccess();
+      
+      // 성공 후 1초 후에 모달 닫기
+      setTimeout(() => {
+        handleClose();
+      }, 1000);
+    } catch (error: any) {
+      setError(error.message || '계정 상태 변경 중 오류가 발생했습니다.');
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  const handleClose = () => {
+    if (!loading) {
+      setStatus('ACTIVE');
+      setReason('');
+      setError(null);
+      setSuccess(false);
+      onClose();
+    }
+  };
+
+  return (
+    <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
+      <DialogTitle>계정 상태 변경</DialogTitle>
+      <DialogContent>
+        {success ? (
+          <Alert severity="success" sx={{ mt: 2 }}>
+            계정 상태가 성공적으로 변경되었습니다.
+          </Alert>
+        ) : (
+          <Box sx={{ pt: 2 }}>
+            {error && (
+              <Alert severity="error" sx={{ mb: 2 }}>
+                {error}
+              </Alert>
+            )}
+            
+            <FormControl fullWidth sx={{ mb: 3 }}>
+              <InputLabel id="account-status-label">계정 상태</InputLabel>
+              <Select
+                labelId="account-status-label"
+                value={status}
+                label="계정 상태"
+                onChange={(e) => setStatus(e.target.value as AccountStatus)}
+                disabled={loading}
+              >
+                <MenuItem value="ACTIVE">활성화</MenuItem>
+                <MenuItem value="INACTIVE">비활성화</MenuItem>
+                <MenuItem value="SUSPENDED">정지</MenuItem>
+              </Select>
+            </FormControl>
+            
+            <TextField
+              fullWidth
+              label="사유"
+              multiline
+              rows={4}
+              value={reason}
+              onChange={(e) => setReason(e.target.value)}
+              disabled={loading}
+              placeholder="상태 변경 사유를 입력하세요"
+              helperText={
+                status !== 'ACTIVE' 
+                  ? '사용자에게 알림이 전송됩니다.' 
+                  : '활성화 상태로 변경 시 사유는 선택사항입니다.'
+              }
+            />
+            
+            {status === 'SUSPENDED' && (
+              <Typography color="error" variant="body2" sx={{ mt: 2 }}>
+                주의: 계정 정지는 사용자가 앱에 로그인할 수 없게 됩니다.
+              </Typography>
+            )}
+          </Box>
+        )}
+      </DialogContent>
+      <DialogActions>
+        <Button onClick={handleClose} disabled={loading}>
+          취소
+        </Button>
+        <Button 
+          onClick={handleSubmit} 
+          variant="contained" 
+          color="primary" 
+          disabled={loading || success}
+          startIcon={loading ? <CircularProgress size={20} /> : null}
+        >
+          {loading ? '처리 중...' : '변경하기'}
+        </Button>
+      </DialogActions>
+    </Dialog>
+  );
+};
+
+export default AccountStatusModal;
diff --git a/components/admin/appearance/modals/EditProfileModal.tsx b/components/admin/appearance/modals/EditProfileModal.tsx
new file mode 100644
index 0000000..5be23c8
--- /dev/null
+++ b/components/admin/appearance/modals/EditProfileModal.tsx
@@ -0,0 +1,223 @@
+import React, { useState, useEffect } from 'react';
+import {
+  Dialog,
+  DialogTitle,
+  DialogContent,
+  DialogActions,
+  Button,
+  TextField,
+  Box,
+  CircularProgress,
+  Alert,
+  Typography,
+  Grid,
+  FormControl,
+  InputLabel,
+  Select,
+  MenuItem
+} from '@mui/material';
+import EditIcon from '@mui/icons-material/Edit';
+import AdminService from '@/app/services/admin';
+import { UserDetail } from '../UserDetailModal';
+
+interface EditProfileModalProps {
+  open: boolean;
+  onClose: () => void;
+  userId: string;
+  userDetail: UserDetail | null;
+  onSuccess?: () => void;
+}
+
+const EditProfileModal: React.FC<EditProfileModalProps> = ({
+  open,
+  onClose,
+  userId,
+  userDetail,
+  onSuccess
+}) => {
+  const [formData, setFormData] = useState({
+    name: '',
+    age: '',
+    gender: '',
+    phoneNumber: '',
+    instagramId: ''
+  });
+  
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [success, setSuccess] = useState(false);
+
+  // 유저 정보로 폼 초기화
+  useEffect(() => {
+    if (userDetail) {
+      setFormData({
+        name: userDetail.name || '',
+        age: userDetail.age ? String(userDetail.age) : '',
+        gender: userDetail.gender || '',
+        phoneNumber: userDetail.phoneNumber || '',
+        instagramId: userDetail.instagramId || ''
+      });
+    }
+  }, [userDetail]);
+
+  const handleChange = (e: React.ChangeEvent<HTMLInputElement | { name?: string; value: unknown }>) => {
+    const { name, value } = e.target;
+    if (name) {
+      setFormData(prev => ({
+        ...prev,
+        [name]: value
+      }));
+    }
+  };
+
+  const handleSubmit = async () => {
+    if (!userId) return;
+
+    try {
+      setLoading(true);
+      setError(null);
+      
+      // 숫자 필드 변환
+      const profileData = {
+        ...formData,
+        age: formData.age ? parseInt(formData.age, 10) : undefined
+      };
+      
+      await AdminService.userAppearance.updateUserProfile(userId, profileData);
+      
+      setSuccess(true);
+      if (onSuccess) onSuccess();
+      
+      // 성공 후 1초 후에 모달 닫기
+      setTimeout(() => {
+        handleClose();
+      }, 1000);
+    } catch (error: any) {
+      setError(error.message || '프로필 수정 중 오류가 발생했습니다.');
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  const handleClose = () => {
+    if (!loading) {
+      setError(null);
+      setSuccess(false);
+      onClose();
+    }
+  };
+
+  return (
+    <Dialog open={open} onClose={handleClose} maxWidth="md" fullWidth>
+      <DialogTitle>
+        <Box sx={{ display: 'flex', alignItems: 'center' }}>
+          <EditIcon color="primary" sx={{ mr: 1 }} />
+          프로필 직접 수정
+        </Box>
+      </DialogTitle>
+      <DialogContent>
+        {success ? (
+          <Alert severity="success" sx={{ mt: 2 }}>
+            프로필이 성공적으로 수정되었습니다.
+          </Alert>
+        ) : (
+          <Box sx={{ pt: 2 }}>
+            {error && (
+              <Alert severity="error" sx={{ mb: 2 }}>
+                {error}
+              </Alert>
+            )}
+            
+            <Typography variant="body2" sx={{ mb: 3 }}>
+              사용자의 프로필 정보를 직접 수정합니다. 이 작업은 즉시 반영됩니다.
+            </Typography>
+            
+            <Grid container spacing={2}>
+              <Grid item xs={12} sm={6}>
+                <TextField
+                  fullWidth
+                  label="이름"
+                  name="name"
+                  value={formData.name}
+                  onChange={handleChange}
+                  disabled={loading}
+                  required
+                />
+              </Grid>
+              
+              <Grid item xs={12} sm={6}>
+                <TextField
+                  fullWidth
+                  label="나이"
+                  name="age"
+                  type="number"
+                  value={formData.age}
+                  onChange={handleChange}
+                  disabled={loading}
+                  inputProps={{ min: 18, max: 100 }}
+                />
+              </Grid>
+              
+              <Grid item xs={12} sm={6}>
+                <FormControl fullWidth>
+                  <InputLabel id="gender-label">성별</InputLabel>
+                  <Select
+                    labelId="gender-label"
+                    name="gender"
+                    value={formData.gender}
+                    label="성별"
+                    onChange={handleChange}
+                    disabled={loading}
+                  >
+                    <MenuItem value="MALE">남성</MenuItem>
+                    <MenuItem value="FEMALE">여성</MenuItem>
+                  </Select>
+                </FormControl>
+              </Grid>
+              
+              <Grid item xs={12} sm={6}>
+                <TextField
+                  fullWidth
+                  label="전화번호"
+                  name="phoneNumber"
+                  value={formData.phoneNumber}
+                  onChange={handleChange}
+                  disabled={loading}
+                  placeholder="010-1234-5678"
+                />
+              </Grid>
+              
+              <Grid item xs={12}>
+                <TextField
+                  fullWidth
+                  label="인스타그램 ID"
+                  name="instagramId"
+                  value={formData.instagramId}
+                  onChange={handleChange}
+                  disabled={loading}
+                  placeholder="instagram_id"
+                />
+              </Grid>
+            </Grid>
+          </Box>
+        )}
+      </DialogContent>
+      <DialogActions>
+        <Button onClick={handleClose} disabled={loading}>
+          취소
+        </Button>
+        <Button 
+          onClick={handleSubmit} 
+          variant="contained" 
+          color="primary" 
+          disabled={loading || success || !formData.name}
+          startIcon={loading ? <CircularProgress size={20} /> : null}
+        >
+          {loading ? '저장 중...' : '저장하기'}
+        </Button>
+      </DialogActions>
+    </Dialog>
+  );
+};
+
+export default EditProfileModal;
diff --git a/components/admin/appearance/modals/ProfileUpdateRequestModal.tsx b/components/admin/appearance/modals/ProfileUpdateRequestModal.tsx
new file mode 100644
index 0000000..724c1eb
--- /dev/null
+++ b/components/admin/appearance/modals/ProfileUpdateRequestModal.tsx
@@ -0,0 +1,149 @@
+import React, { useState } from 'react';
+import {
+  Dialog,
+  DialogTitle,
+  DialogContent,
+  DialogActions,
+  Button,
+  TextField,
+  Box,
+  CircularProgress,
+  Alert,
+  Typography,
+  FormControlLabel,
+  Checkbox
+} from '@mui/material';
+import EditIcon from '@mui/icons-material/Edit';
+import AdminService from '@/app/services/admin';
+
+interface ProfileUpdateRequestModalProps {
+  open: boolean;
+  onClose: () => void;
+  userId: string;
+  onSuccess?: () => void;
+}
+
+const ProfileUpdateRequestModal: React.FC<ProfileUpdateRequestModalProps> = ({
+  open,
+  onClose,
+  userId,
+  onSuccess
+}) => {
+  const [message, setMessage] = useState('');
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [success, setSuccess] = useState(false);
+  const [useTemplate, setUseTemplate] = useState(false);
+
+  const handleUseTemplate = () => {
+    setUseTemplate(!useTemplate);
+    if (!useTemplate) {
+      setMessage('프로필 사진 또는 정보를 업데이트해 주세요. 더 나은 매칭 서비스를 위해 최신 정보가 필요합니다.');
+    }
+  };
+
+  const handleSubmit = async () => {
+    if (!userId || !message.trim()) return;
+
+    try {
+      setLoading(true);
+      setError(null);
+      
+      await AdminService.userAppearance.sendProfileUpdateRequest(userId, message);
+      
+      setSuccess(true);
+      if (onSuccess) onSuccess();
+      
+      // 성공 후 1초 후에 모달 닫기
+      setTimeout(() => {
+        handleClose();
+      }, 1000);
+    } catch (error: any) {
+      setError(error.message || '프로필 수정 요청 발송 중 오류가 발생했습니다.');
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  const handleClose = () => {
+    if (!loading) {
+      setMessage('');
+      setError(null);
+      setSuccess(false);
+      setUseTemplate(false);
+      onClose();
+    }
+  };
+
+  return (
+    <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
+      <DialogTitle>
+        <Box sx={{ display: 'flex', alignItems: 'center' }}>
+          <EditIcon color="primary" sx={{ mr: 1 }} />
+          프로필 수정 요청
+        </Box>
+      </DialogTitle>
+      <DialogContent>
+        {success ? (
+          <Alert severity="success" sx={{ mt: 2 }}>
+            프로필 수정 요청이 성공적으로 발송되었습니다.
+          </Alert>
+        ) : (
+          <Box sx={{ pt: 2 }}>
+            {error && (
+              <Alert severity="error" sx={{ mb: 2 }}>
+                {error}
+              </Alert>
+            )}
+            
+            <Typography variant="body2" sx={{ mb: 2 }}>
+              사용자에게 프로필 수정을 요청합니다. 이 메시지는 사용자의 앱 내 알림으로 전송됩니다.
+            </Typography>
+            
+            <FormControlLabel
+              control={
+                <Checkbox 
+                  checked={useTemplate} 
+                  onChange={handleUseTemplate}
+                  disabled={loading}
+                />
+              }
+              label="기본 템플릿 사용"
+              sx={{ mb: 2 }}
+            />
+            
+            <TextField
+              fullWidth
+              label="요청 메시지"
+              multiline
+              rows={4}
+              value={message}
+              onChange={(e) => setMessage(e.target.value)}
+              disabled={loading}
+              placeholder="프로필 수정 요청 내용을 입력하세요"
+              error={message.trim() === ''}
+              helperText={message.trim() === '' ? '메시지를 입력해주세요' : ''}
+              required
+            />
+          </Box>
+        )}
+      </DialogContent>
+      <DialogActions>
+        <Button onClick={handleClose} disabled={loading}>
+          취소
+        </Button>
+        <Button 
+          onClick={handleSubmit} 
+          variant="contained" 
+          color="primary" 
+          disabled={loading || success || message.trim() === ''}
+          startIcon={loading ? <CircularProgress size={20} /> : null}
+        >
+          {loading ? '발송 중...' : '발송하기'}
+        </Button>
+      </DialogActions>
+    </Dialog>
+  );
+};
+
+export default ProfileUpdateRequestModal;
diff --git a/components/admin/appearance/modals/WarningMessageModal.tsx b/components/admin/appearance/modals/WarningMessageModal.tsx
new file mode 100644
index 0000000..39f037d
--- /dev/null
+++ b/components/admin/appearance/modals/WarningMessageModal.tsx
@@ -0,0 +1,126 @@
+import React, { useState } from 'react';
+import {
+  Dialog,
+  DialogTitle,
+  DialogContent,
+  DialogActions,
+  Button,
+  TextField,
+  Box,
+  CircularProgress,
+  Alert,
+  Typography
+} from '@mui/material';
+import WarningIcon from '@mui/icons-material/Warning';
+import AdminService from '@/app/services/admin';
+
+interface WarningMessageModalProps {
+  open: boolean;
+  onClose: () => void;
+  userId: string;
+  onSuccess?: () => void;
+}
+
+const WarningMessageModal: React.FC<WarningMessageModalProps> = ({
+  open,
+  onClose,
+  userId,
+  onSuccess
+}) => {
+  const [message, setMessage] = useState('');
+  const [loading, setLoading] = useState(false);
+  const [error, setError] = useState<string | null>(null);
+  const [success, setSuccess] = useState(false);
+
+  const handleSubmit = async () => {
+    if (!userId || !message.trim()) return;
+
+    try {
+      setLoading(true);
+      setError(null);
+      
+      await AdminService.userAppearance.sendWarningMessage(userId, message);
+      
+      setSuccess(true);
+      if (onSuccess) onSuccess();
+      
+      // 성공 후 1초 후에 모달 닫기
+      setTimeout(() => {
+        handleClose();
+      }, 1000);
+    } catch (error: any) {
+      setError(error.message || '경고 메시지 발송 중 오류가 발생했습니다.');
+    } finally {
+      setLoading(false);
+    }
+  };
+
+  const handleClose = () => {
+    if (!loading) {
+      setMessage('');
+      setError(null);
+      setSuccess(false);
+      onClose();
+    }
+  };
+
+  return (
+    <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
+      <DialogTitle>
+        <Box sx={{ display: 'flex', alignItems: 'center' }}>
+          <WarningIcon color="warning" sx={{ mr: 1 }} />
+          경고 메시지 발송
+        </Box>
+      </DialogTitle>
+      <DialogContent>
+        {success ? (
+          <Alert severity="success" sx={{ mt: 2 }}>
+            경고 메시지가 성공적으로 발송되었습니다.
+          </Alert>
+        ) : (
+          <Box sx={{ pt: 2 }}>
+            {error && (
+              <Alert severity="error" sx={{ mb: 2 }}>
+                {error}
+              </Alert>
+            )}
+            
+            <Typography variant="body2" sx={{ mb: 2 }}>
+              사용자에게 경고 메시지를 발송합니다. 이 메시지는 사용자의 앱 내 알림으로 전송됩니다.
+            </Typography>
+            
+            <TextField
+              fullWidth
+              label="경고 메시지"
+              multiline
+              rows={4}
+              value={message}
+              onChange={(e) => setMessage(e.target.value)}
+              disabled={loading}
+              placeholder="경고 메시지 내용을 입력하세요"
+              error={message.trim() === ''}
+              helperText={message.trim() === '' ? '메시지를 입력해주세요' : ''}
+              required
+            />
+          </Box>
+        )}
+      </DialogContent>
+      <DialogActions>
+        <Button onClick={handleClose} disabled={loading}>
+          취소
+        </Button>
+        <Button 
+          onClick={handleSubmit} 
+          variant="contained" 
+          color="warning" 
+          disabled={loading || success || message.trim() === ''}
+          startIcon={loading ? <CircularProgress size={20} /> : null}
+        >
+          {loading ? '발송 중...' : '발송하기'}
+        </Button>
+      </DialogActions>
+    </Dialog>
+  );
+};
+
+export default WarningMessageModal;
